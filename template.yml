AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Incident Reporting App - Auth & Authorization Infrastructure

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.12
    Handler: app.lambda_handler
  Api:
    Auth:
      DefaultAuthorizer: CognitoAuth
      Authorizers:
        CognitoAuth:
          UserPoolArn: !GetAtt UserPool.Arn
    Cors:
      AllowMethods: "'GET,POST,OPTIONS,DELETE,PUT'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'http://localhost:4200,https://dev.d2zgxshg38rb8v.amplifyapp.com'"

Resources:

################################################## Cognito ####################################################

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: IncidentReportingUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        CustomMessage: !GetAtt CustomMessageFunction.Arn
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: region
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: country
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: city
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: telephone
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: IncidentReportingFrontendClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: IncidentReportingIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Cognito Groups
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref UserPool
      Precedence: 1

  CityOfficialGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: CityOfficial
      UserPoolId: !Ref UserPool
      Precedence: 2

################################################## APIs & Functions ##########################################

  AdminInviteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AdminInviteUserFunction
      Description: Allows Admins to invite new Admins or City Officials
      CodeUri: admin_invite/
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /invite
            Method: POST
            Auth:
              Authorizer: CognitoAuth

  CustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoCustomMessageFunction
      Description: Customizes Cognito emails for invites and password resets
      CodeUri: custom_message/
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

  CustomMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CustomMessageFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool

  ApiGatewayUrl:
    Description: Base URL for API Gateway
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    